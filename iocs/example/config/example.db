record(stringout,"DEMO-EA-IOC-03:0:NAME") {
	field(VAL,"Not In Use")
	field(DTYP,"Soft Channel")
}
record(longout,"DEMO-EA-IOC-03:0:STATE") {
	field(DTYP,"Soft Channel")
}

#% archiver 10 Monitor VAL
#% None $SEVRCOMMAND UP_ANY dls-alh-handler.py DEMO-EA-IOC-03:0:STATUS
record(mbbo,"DEMO-EA-IOC-03:0:STATUS") {
	field(DTYP,"Soft Channel")
	field(NOBT,"3")
	field(ONVL,"1")
	field(TWVL,"2")
	field(THVL,"3")
	field(FRVL,"4")
	field(ZRST,"No Status")
	field(ONST,"Failure")
	field(TWST,"Warning")
	field(THST,"Seq Fail")
	field(FRST,"Ok")
	field(ONSV, "MAJOR")
	field(TWSV, "MINOR")
	field(THSV, "MINOR")
}
record(stringout,"DEMO-EA-IOC-03:0:STATUSST") {
	field(DTYP,"Soft Channel")
	field(VAL,"Status unknown")
}
record(stringout,"DEMO-EA-IOC-03:0:TIME") {
	field(DTYP,"Soft Channel")
	field(VAL,"Not yet saved")
}
record(stringout,"DEMO-EA-IOC-03:1:NAME") {
	field(VAL,"Not In Use")
	field(DTYP,"Soft Channel")
}
record(longout,"DEMO-EA-IOC-03:1:STATE") {
	field(DTYP,"Soft Channel")
}

#% archiver 10 Monitor VAL
#% None $SEVRCOMMAND UP_ANY dls-alh-handler.py DEMO-EA-IOC-03:1:STATUS
record(mbbo,"DEMO-EA-IOC-03:1:STATUS") {
	field(DTYP,"Soft Channel")
	field(NOBT,"3")
	field(ONVL,"1")
	field(TWVL,"2")
	field(THVL,"3")
	field(FRVL,"4")
	field(ZRST,"No Status")
	field(ONST,"Failure")
	field(TWST,"Warning")
	field(THST,"Seq Fail")
	field(FRST,"Ok")
	field(ONSV, "MAJOR")
	field(TWSV, "MINOR")
	field(THSV, "MINOR")
}
record(stringout,"DEMO-EA-IOC-03:1:STATUSST") {
	field(DTYP,"Soft Channel")
	field(VAL,"Status unknown")
}
record(stringout,"DEMO-EA-IOC-03:1:TIME") {
	field(DTYP,"Soft Channel")
	field(VAL,"Not yet saved")
}
record(stringout,"DEMO-EA-IOC-03:2:NAME") {
	field(VAL,"Not In Use")
	field(DTYP,"Soft Channel")
}
record(longout,"DEMO-EA-IOC-03:2:STATE") {
	field(DTYP,"Soft Channel")
}

#% archiver 10 Monitor VAL
#% None $SEVRCOMMAND UP_ANY dls-alh-handler.py DEMO-EA-IOC-03:2:STATUS
record(mbbo,"DEMO-EA-IOC-03:2:STATUS") {
	field(DTYP,"Soft Channel")
	field(NOBT,"3")
	field(ONVL,"1")
	field(TWVL,"2")
	field(THVL,"3")
	field(FRVL,"4")
	field(ZRST,"No Status")
	field(ONST,"Failure")
	field(TWST,"Warning")
	field(THST,"Seq Fail")
	field(FRST,"Ok")
	field(ONSV, "MAJOR")
	field(TWSV, "MINOR")
	field(THSV, "MINOR")
}
record(stringout,"DEMO-EA-IOC-03:2:STATUSST") {
	field(DTYP,"Soft Channel")
	field(VAL,"Status unknown")
}
record(stringout,"DEMO-EA-IOC-03:2:TIME") {
	field(DTYP,"Soft Channel")
	field(VAL,"Not yet saved")
}
# This associates an edm screen with the template
# % gui, PCO, edm, save_restoreStatus_more.edl, P=DEMO-EA-IOC-03

# This associates BOY screens with the template
# % gui, PCO, boydetail, asApp_opi/autosave_detail.opi, desc=DEMO-EA-IOC-03, device=DEMO-EA-IOC-03, name=PCO
# % gui, PCO, boyembed, asApp_opi/autosave_embed.opi, desc=DEMO-EA-IOC-03, device=DEMO-EA-IOC-03, name=PCO
# % gui, PCO, boyembed, asApp_opi/autosave_embed_box.opi, desc=DEMO-EA-IOC-03, device=DEMO-EA-IOC-03, name=PCO

# These define what PVs a detail screen should contain
# % gui, PCO, readback, General Status, DEMO-EA-IOC-03:SRSTATUSST
# % gui, PCO, readback, Recently, DEMO-EA-IOC-03:SRRECENTST
# % gui, PCO, readback, Reboot Status, DEMO-EA-IOC-03:RRSTATUSST
# % gui, PCO, readback, Reboot time, DEMO-EA-IOC-03:RRTIME
# % gui, PCO, readback, File 0 Status, DEMO-EA-IOC-03:0:STATUSST
# % gui, PCO, readback, File 0 Name, DEMO-EA-IOC-03:0:NAME
# % gui, PCO, readback, File 0 Written, DEMO-EA-IOC-03:0:TIME
# % gui, PCO, readback, File 1 Status, DEMO-EA-IOC-03:1:STATUSST
# % gui, PCO, readback, File 1 Name, DEMO-EA-IOC-03:1:NAME
# % gui, PCO, readback, File 1 Written, DEMO-EA-IOC-03:1:TIME
# % gui, PCO, readback, File 2 Status, DEMO-EA-IOC-03:2:STATUSST
# % gui, PCO, readback, File 2 Name, DEMO-EA-IOC-03:2:NAME
# % gui, PCO, readback, File 2 Written, DEMO-EA-IOC-03:2:TIME


# This makes the component icon reflect the status and severity
# % gui, PCO, sevr
#% archiver 10 Monitor VAL
#% None $SEVRCOMMAND UP_ANY dls-alh-handler.py DEMO-EA-IOC-03:RRSTATUS
record(mbbo,"DEMO-EA-IOC-03:RRSTATUS") {
	field(DTYP,"Soft Channel")
	field(NOBT,"3")
	field(ONVL,"1")
	field(TWVL,"2")
	field(THVL,"3")
	field(FRVL,"4")
	field(ZRST,"No Status")
	field(ONST,"Failure")
	field(TWST,"Warning")
	field(THST,"Seq Fail")
	field(FRST,"Ok")
	field(ONSV, "MAJOR")
	field(TWSV, "MINOR")
	field(THSV, "MINOR")
}

record(stringout,"DEMO-EA-IOC-03:RRSTATUSST") {
	field(DTYP,"Soft Channel")
	field(VAL,"Status unknown")
}

record(stringout,"DEMO-EA-IOC-03:RRTIME") {
	field(DTYP,"Soft Channel")
	field(VAL,"Not yet saved")
}

# % gui, PCO, sevr
#% archiver 10 Monitor VAL
#% None $SEVRCOMMAND UP_ANY dls-alh-handler.py DEMO-EA-IOC-03:SRSTATUS
record(mbbo,"DEMO-EA-IOC-03:SRSTATUS") {
	field(DTYP,"Soft Channel")
	field(NOBT,"3")
	field(ONVL,"1")
	field(TWVL,"2")
	field(THVL,"3")
	field(FRST,"4")
	field(ZRST,"No Status")
	field(ONST,"Failure")
	field(TWST,"Warning")
	field(THST,"Seq Fail")
	field(FRST,"Ok")
	field(ONSV, "MAJOR")
	field(TWSV, "MINOR")
	field(THSV, "MINOR")
}

record(bo,"DEMO-EA-IOC-03:SRHEARTBT") {
	field(DTYP,"Soft Channel")
}

record(stringout,"DEMO-EA-IOC-03:SRSTATUSST") {
	field(DTYP,"Soft Channel")
	field(VAL,"Status unknown")
}

record(stringout,"DEMO-EA-IOC-03:SRRECENTST") {
	field(DTYP,"Soft Channel")
	field(VAL,"Status unknown")
}
#=================================================================#
# Template file: simDetector.template
# Database for the records specific to the simulated detector driver
# Mark Rivers
# March 23, 2008

# Macros:
#% macro, P, Device Prefix
#% macro, R, Device Suffix
#% macro, PORT, Asyn Port name
#% macro, TIMEOUT, Timeout
#% macro, ADDR, Asyn Port address

# This associates the template with an edm screen
# % gui, PCO.CAM, edmtab, simDetector.edl, P=DEMO-EA-PCO-01,R=:CAM:

#=================================================================#
# Template file: ADBase.template
# Database for area detector control using asyn driver and standard asyn device support
# Mark Rivers
# March 9, 2008

# Macros:
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# % macro, TIMEOUT, Timeout
# % macro, ADDR, Asyn Port address

#=================================================================#
# Template file: NDArrayBase.template
# Database for area detector control using asyn driver and standard asyn device support
# Mark Rivers
# March 9, 2008

###################################################################
#  This record contains the version of ADCore                     #
###################################################################

record(stringin, "DEMO-EA-PCO-01:CAM:ADCoreVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PCO.CAM,0,1)ADCORE_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the version of the driver or plugin       #
###################################################################

record(stringin, "DEMO-EA-PCO-01:CAM:DriverVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PCO.CAM,0,1)DRIVER_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the asyn port name of this detector       #
###################################################################

record(stringin, "DEMO-EA-PCO-01:CAM:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PCO.CAM,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longout, "DEMO-EA-PCO-01:CAM:NDimensions")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PCO.CAM,0,1)ARRAY_NDIMENSIONS")
}

record(longin, "DEMO-EA-PCO-01:CAM:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PCO.CAM,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform records
record(waveform, "DEMO-EA-PCO-01:CAM:Dimensions")
{
    field(DTYP, "asynInt32ArrayOut")
    field(INP,  "@asyn(PCO.CAM,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "DEMO-EA-PCO-01:CAM:Dim0SA")
}

record(subArray, "DEMO-EA-PCO-01:CAM:Dim0SA")
{
    field(INP,  "DEMO-EA-PCO-01:CAM:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "DEMO-EA-PCO-01:CAM:ArraySize0")
}

record(longin, "DEMO-EA-PCO-01:CAM:ArraySize0")
{
    field(INP,  "DEMO-EA-PCO-01:CAM:Dim0SA")
    field(FLNK, "DEMO-EA-PCO-01:CAM:Dim1SA")
}

record(subArray, "DEMO-EA-PCO-01:CAM:Dim1SA")
{
    field(INP,  "DEMO-EA-PCO-01:CAM:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "DEMO-EA-PCO-01:CAM:ArraySize1")
}

record(longin, "DEMO-EA-PCO-01:CAM:ArraySize1")
{
    field(INP,  "DEMO-EA-PCO-01:CAM:Dim1SA")
    field(FLNK, "DEMO-EA-PCO-01:CAM:Dim2SA")
}

record(subArray, "DEMO-EA-PCO-01:CAM:Dim2SA")
{
    field(INP,  "DEMO-EA-PCO-01:CAM:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "DEMO-EA-PCO-01:CAM:ArraySize2")
}

record(longin, "DEMO-EA-PCO-01:CAM:ArraySize2")
{
    field(INP,  "DEMO-EA-PCO-01:CAM:Dim2SA")
    field(FLNK, "DEMO-EA-PCO-01:CAM:Dim3SA")
}

record(subArray, "DEMO-EA-PCO-01:CAM:Dim3SA")
{
    field(INP,  "DEMO-EA-PCO-01:CAM:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "3")
    field(FLNK, "DEMO-EA-PCO-01:CAM:ArraySize3")
}

record(longin, "DEMO-EA-PCO-01:CAM:ArraySize3")
{
    field(INP,  "DEMO-EA-PCO-01:CAM:Dim3SA")
    field(FLNK, "DEMO-EA-PCO-01:CAM:Dim4SA")
}

record(subArray, "DEMO-EA-PCO-01:CAM:Dim4SA")
{
    field(INP,  "DEMO-EA-PCO-01:CAM:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "4")
    field(FLNK, "DEMO-EA-PCO-01:CAM:ArraySize4")
}

record(longin, "DEMO-EA-PCO-01:CAM:ArraySize4")
{
    field(INP,  "DEMO-EA-PCO-01:CAM:Dim4SA")
    field(FLNK, "DEMO-EA-PCO-01:CAM:Dim5SA")
}

record(subArray, "DEMO-EA-PCO-01:CAM:Dim5SA")
{
    field(INP,  "DEMO-EA-PCO-01:CAM:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "5")
    field(FLNK, "DEMO-EA-PCO-01:CAM:ArraySize5")
}

record(longin, "DEMO-EA-PCO-01:CAM:ArraySize5")
{
    field(INP,  "DEMO-EA-PCO-01:CAM:Dim5SA")
    field(FLNK, "DEMO-EA-PCO-01:CAM:Dim6SA")
}

record(subArray, "DEMO-EA-PCO-01:CAM:Dim6SA")
{
    field(INP,  "DEMO-EA-PCO-01:CAM:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "6")
    field(FLNK, "DEMO-EA-PCO-01:CAM:ArraySize6")
}

record(longin, "DEMO-EA-PCO-01:CAM:ArraySize6")
{
    field(INP,  "DEMO-EA-PCO-01:CAM:Dim6SA")
    field(FLNK, "DEMO-EA-PCO-01:CAM:Dim7SA")
}

record(subArray, "DEMO-EA-PCO-01:CAM:Dim7SA")
{
    field(INP,  "DEMO-EA-PCO-01:CAM:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "7")
    field(FLNK, "DEMO-EA-PCO-01:CAM:ArraySize7")
}

record(longin, "DEMO-EA-PCO-01:CAM:ArraySize7")
{
    field(INP,  "DEMO-EA-PCO-01:CAM:Dim7SA")
    field(FLNK, "DEMO-EA-PCO-01:CAM:Dim8SA")
}

record(subArray, "DEMO-EA-PCO-01:CAM:Dim8SA")
{
    field(INP,  "DEMO-EA-PCO-01:CAM:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "8")
    field(FLNK, "DEMO-EA-PCO-01:CAM:ArraySize8")
}

record(longin, "DEMO-EA-PCO-01:CAM:ArraySize8")
{
    field(INP,  "DEMO-EA-PCO-01:CAM:Dim8SA")
    field(FLNK, "DEMO-EA-PCO-01:CAM:Dim9SA")
}

record(subArray, "DEMO-EA-PCO-01:CAM:Dim9SA")
{
    field(INP,  "DEMO-EA-PCO-01:CAM:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "9")
    field(FLNK, "DEMO-EA-PCO-01:CAM:ArraySize9")
}

record(longin, "DEMO-EA-PCO-01:CAM:ArraySize9")
{
    field(INP,  "DEMO-EA-PCO-01:CAM:Dim9SA")
}


record(waveform, "DEMO-EA-PCO-01:CAM:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(PCO.CAM,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "DEMO-EA-PCO-01:CAM:Dim0SA_RBV")
    field(SCAN, "I/O Intr")
}

record(subArray, "DEMO-EA-PCO-01:CAM:Dim0SA_RBV")
{
    field(INP,  "DEMO-EA-PCO-01:CAM:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "DEMO-EA-PCO-01:CAM:ArraySize0_RBV")
}

record(longin, "DEMO-EA-PCO-01:CAM:ArraySize0_RBV")
{
    field(INP,  "DEMO-EA-PCO-01:CAM:Dim0SA_RBV")
    field(FLNK, "DEMO-EA-PCO-01:CAM:Dim1SA_RBV")
}

record(subArray, "DEMO-EA-PCO-01:CAM:Dim1SA_RBV")
{
    field(INP,  "DEMO-EA-PCO-01:CAM:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "DEMO-EA-PCO-01:CAM:ArraySize1_RBV")
}

record(longin, "DEMO-EA-PCO-01:CAM:ArraySize1_RBV")
{
    field(INP,  "DEMO-EA-PCO-01:CAM:Dim1SA_RBV")
    field(FLNK, "DEMO-EA-PCO-01:CAM:Dim2SA_RBV")
}

record(subArray, "DEMO-EA-PCO-01:CAM:Dim2SA_RBV")
{
    field(INP,  "DEMO-EA-PCO-01:CAM:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "DEMO-EA-PCO-01:CAM:ArraySize2_RBV")
}

record(longin, "DEMO-EA-PCO-01:CAM:ArraySize2_RBV")
{
    field(INP,  "DEMO-EA-PCO-01:CAM:Dim2SA_RBV")
    field(FLNK, "DEMO-EA-PCO-01:CAM:Dim3SA_RBV")
}

record(subArray, "DEMO-EA-PCO-01:CAM:Dim3SA_RBV")
{
    field(INP,  "DEMO-EA-PCO-01:CAM:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "3")
    field(FLNK, "DEMO-EA-PCO-01:CAM:ArraySize3_RBV")
}

record(longin, "DEMO-EA-PCO-01:CAM:ArraySize3_RBV")
{
    field(INP,  "DEMO-EA-PCO-01:CAM:Dim3SA_RBV")
    field(FLNK, "DEMO-EA-PCO-01:CAM:Dim4SA_RBV")
}

record(subArray, "DEMO-EA-PCO-01:CAM:Dim4SA_RBV")
{
    field(INP,  "DEMO-EA-PCO-01:CAM:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "4")
    field(FLNK, "DEMO-EA-PCO-01:CAM:ArraySize4_RBV")
}

record(longin, "DEMO-EA-PCO-01:CAM:ArraySize4_RBV")
{
    field(INP,  "DEMO-EA-PCO-01:CAM:Dim4SA_RBV")
    field(FLNK, "DEMO-EA-PCO-01:CAM:Dim5SA_RBV")
}

record(subArray, "DEMO-EA-PCO-01:CAM:Dim5SA_RBV")
{
    field(INP,  "DEMO-EA-PCO-01:CAM:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "5")
    field(FLNK, "DEMO-EA-PCO-01:CAM:ArraySize5_RBV")
}

record(longin, "DEMO-EA-PCO-01:CAM:ArraySize5_RBV")
{
    field(INP,  "DEMO-EA-PCO-01:CAM:Dim5SA_RBV")
    field(FLNK, "DEMO-EA-PCO-01:CAM:Dim6SA_RBV")
}

record(subArray, "DEMO-EA-PCO-01:CAM:Dim6SA_RBV")
{
    field(INP,  "DEMO-EA-PCO-01:CAM:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "6")
    field(FLNK, "DEMO-EA-PCO-01:CAM:ArraySize6_RBV")
}

record(longin, "DEMO-EA-PCO-01:CAM:ArraySize6_RBV")
{
    field(INP,  "DEMO-EA-PCO-01:CAM:Dim6SA_RBV")
    field(FLNK, "DEMO-EA-PCO-01:CAM:Dim7SA_RBV")
}

record(subArray, "DEMO-EA-PCO-01:CAM:Dim7SA_RBV")
{
    field(INP,  "DEMO-EA-PCO-01:CAM:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "7")
    field(FLNK, "DEMO-EA-PCO-01:CAM:ArraySize7_RBV")
}

record(longin, "DEMO-EA-PCO-01:CAM:ArraySize7_RBV")
{
    field(INP,  "DEMO-EA-PCO-01:CAM:Dim7SA_RBV")
    field(FLNK, "DEMO-EA-PCO-01:CAM:Dim8SA_RBV")
}

record(subArray, "DEMO-EA-PCO-01:CAM:Dim8SA_RBV")
{
    field(INP,  "DEMO-EA-PCO-01:CAM:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "8")
    field(FLNK, "DEMO-EA-PCO-01:CAM:ArraySize8_RBV")
}

record(longin, "DEMO-EA-PCO-01:CAM:ArraySize8_RBV")
{
    field(INP,  "DEMO-EA-PCO-01:CAM:Dim8SA_RBV")
    field(FLNK, "DEMO-EA-PCO-01:CAM:Dim9SA_RBV")
}

record(subArray, "DEMO-EA-PCO-01:CAM:Dim9SA_RBV")
{
    field(INP,  "DEMO-EA-PCO-01:CAM:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "9")
    field(FLNK, "DEMO-EA-PCO-01:CAM:ArraySize9_RBV")
}

record(longin, "DEMO-EA-PCO-01:CAM:ArraySize9_RBV")
{
    field(INP,  "DEMO-EA-PCO-01:CAM:Dim9SA_RBV")
}


record(mbbi, "DEMO-EA-PCO-01:CAM:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PCO.CAM,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

record(longin, "DEMO-EA-PCO-01:CAM:ArraySizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PCO.CAM,0,1)ARRAY_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "DEMO-EA-PCO-01:CAM:ArraySizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PCO.CAM,0,1)ARRAY_SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(longin, "DEMO-EA-PCO-01:CAM:ArraySizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PCO.CAM,0,1)ARRAY_SIZE_Z")
   field(SCAN, "I/O Intr")
}

record(longin, "DEMO-EA-PCO-01:CAM:ArraySize_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PCO.CAM,0,1)ARRAY_SIZE")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the data type                            #
###################################################################

record(mbbo, "DEMO-EA-PCO-01:CAM:DataType")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PCO.CAM,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(mbbi, "DEMO-EA-PCO-01:CAM:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PCO.CAM,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the color mode                           #
#  These choices must agree with NDColorMode_t in NDArray.h       #
###################################################################

record(mbbo, "DEMO-EA-PCO-01:CAM:ColorMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PCO.CAM,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   info(autosaveFields, "VAL")
}

record(mbbi, "DEMO-EA-PCO-01:CAM:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PCO.CAM,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamps of the array     #
###################################################################
record(longin, "DEMO-EA-PCO-01:CAM:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PCO.CAM,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "DEMO-EA-PCO-01:CAM:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(PCO.CAM,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

record(longin, "DEMO-EA-PCO-01:CAM:EpicsTSSec_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PCO.CAM,0,1)EPICS_TS_SEC")
    field(SCAN, "I/O Intr")
}

record(longin, "DEMO-EA-PCO-01:CAM:EpicsTSNsec_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PCO.CAM,0,1)EPICS_TS_NSEC")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           #
###################################################################
record(longout, "DEMO-EA-PCO-01:CAM:ArrayCounter")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PCO.CAM,0,1)ARRAY_COUNTER")
}

record(longin, "DEMO-EA-PCO-01:CAM:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PCO.CAM,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# Updated rate calculation to use a smoothing factor w/ guard against negative values
record(calc, "DEMO-EA-PCO-01:CAM:ArrayRate_RBV")
{
    field(INPA, "DEMO-EA-PCO-01:CAM:ArrayRate_RBV.LB NPP NMS")   # Previous counter value
    field(INPB, "DEMO-EA-PCO-01:CAM:ArrayCounter_RBV NPP NMS")   # Current counter value
    field(INPC, "1.0")                                # Delta time in seconds
    field(INPD, "DEMO-EA-PCO-01:CAM:ArrayRate_RBV.VAL NPP NMS")  # Previous rate
    field(INPE, "0.0")                 # Smoothing factor
    field(CALC, "(D*E)/C+MAX(0,B-A)*(1-E)/C")
    field(PREC, "2" )
    field(EGU,  "Hz" )
    field(SCAN, "1 second")
}

###################################################################
#  These records control NDArray callacks                         #
###################################################################
record(bo, "DEMO-EA-PCO-01:CAM:ArrayCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PCO.CAM,0,1)ARRAY_CALLBACKS")
    field(ZNAM, "Disable")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Enable")
    field(OSV,  "MINOR")
    field(VAL, "1")
    info(autosaveFields, "VAL")
}

record(bi, "DEMO-EA-PCO-01:CAM:ArrayCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PCO.CAM,0,1)ARRAY_CALLBACKS")
    field(ZNAM, "Disable")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Enable")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains macro definitions for the attributes      #
###################################################################

record(waveform, "DEMO-EA-PCO-01:CAM:NDAttributesMacros")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(PCO.CAM,0,1)ND_ATTRIBUTES_MACROS")
    field(FTVL, "CHAR")
    field(NELM, "256")
    info(autosaveFields, "VAL")
}

###################################################################
#  This record is the name of a file defining attributes          #
###################################################################

record(waveform, "DEMO-EA-PCO-01:CAM:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(PCO.CAM,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
    info(autosaveFields, "VAL")
}

###################################################################
#  This record defines the status of reading attributes file      #
###################################################################

record(mbbi, "DEMO-EA-PCO-01:CAM:NDAttributesStatus")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PCO.CAM,0,1)ND_ATTRIBUTES_STATUS")
    field(ZRVL, "0")
    field(ZRST, "Attributes file OK")
    field(ZRSV, "NO_ALARM")
    field(ONVL, "1")
    field(ONST, "File not found")
    field(ONSV, "MINOR")
    field(TWVL, "2")
    field(TWST, "XML syntax error")
    field(TWSV, "MAJOR")
    field(THVL, "3")
    field(THST, "Macro substitution error")
    field(THSV, "MAJOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    #
###################################################################

record(ai, "DEMO-EA-PCO-01:CAM:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PCO.CAM,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "DEMO-EA-PCO-01:CAM:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PCO.CAM,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "DEMO-EA-PCO-01:CAM:PoolAllocBuffers")
   info(autosaveFields, "SCAN")
}

record(longin, "DEMO-EA-PCO-01:CAM:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PCO.CAM,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "DEMO-EA-PCO-01:CAM:PoolFreeBuffers")
}

record(longin, "DEMO-EA-PCO-01:CAM:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PCO.CAM,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "DEMO-EA-PCO-01:CAM:PoolUsedBuffers")
}

record(calc, "DEMO-EA-PCO-01:CAM:PoolUsedBuffers")
{
    field(INPA, "DEMO-EA-PCO-01:CAM:PoolAllocBuffers NPP MS")
    field(INPB, "DEMO-EA-PCO-01:CAM:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

record(bo, "DEMO-EA-PCO-01:CAM:EmptyFreeList")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PCO.CAM,0,1)POOL_EMPTY_FREELIST")
}

record(longin, "DEMO-EA-PCO-01:CAM:NumQueuedArrays")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PCO.CAM,0,1)NUM_QUEUED_ARRAYS")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control basic information                        #
#  about the detector                                             #
###################################################################

record(stringin, "DEMO-EA-PCO-01:CAM:Manufacturer_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PCO.CAM,0,1)MANUFACTURER")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "DEMO-EA-PCO-01:CAM:Model_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PCO.CAM,0,1)MODEL")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "DEMO-EA-PCO-01:CAM:SerialNumber_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PCO.CAM,0,1)SERIAL_NUMBER")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "DEMO-EA-PCO-01:CAM:SDKVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PCO.CAM,0,1)SDK_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "DEMO-EA-PCO-01:CAM:FirmwareVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PCO.CAM,0,1)FIRMWARE_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(longin, "DEMO-EA-PCO-01:CAM:MaxSizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PCO.CAM,0,1)MAX_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "DEMO-EA-PCO-01:CAM:MaxSizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PCO.CAM,0,1)MAX_SIZE_Y")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the detector readout                     #
#  including binning, region start and size                       #
###################################################################

record(longout, "DEMO-EA-PCO-01:CAM:BinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PCO.CAM,0,1)BIN_X")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "DEMO-EA-PCO-01:CAM:BinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PCO.CAM,0,1)BIN_X")
   field(SCAN, "I/O Intr")
}

record(longout, "DEMO-EA-PCO-01:CAM:BinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PCO.CAM,0,1)BIN_Y")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "DEMO-EA-PCO-01:CAM:BinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PCO.CAM,0,1)BIN_Y")
   field(SCAN, "I/O Intr")
}

record(longout, "DEMO-EA-PCO-01:CAM:MinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PCO.CAM,0,1)MIN_X")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(longin, "DEMO-EA-PCO-01:CAM:MinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PCO.CAM,0,1)MIN_X")
   field(SCAN, "I/O Intr")
}

record(longout, "DEMO-EA-PCO-01:CAM:MinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PCO.CAM,0,1)MIN_Y")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(longin, "DEMO-EA-PCO-01:CAM:MinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PCO.CAM,0,1)MIN_Y")
   field(SCAN, "I/O Intr")
}

record(longout, "DEMO-EA-PCO-01:CAM:SizeX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PCO.CAM,0,1)SIZE_X")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "DEMO-EA-PCO-01:CAM:SizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PCO.CAM,0,1)SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longout, "DEMO-EA-PCO-01:CAM:SizeY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PCO.CAM,0,1)SIZE_Y")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "DEMO-EA-PCO-01:CAM:SizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PCO.CAM,0,1)SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(bo, "DEMO-EA-PCO-01:CAM:ReverseX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PCO.CAM,0,1)REVERSE_X")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(bi, "DEMO-EA-PCO-01:CAM:ReverseX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PCO.CAM,0,1)REVERSE_X")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "DEMO-EA-PCO-01:CAM:ReverseY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PCO.CAM,0,1)REVERSE_Y")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(bi, "DEMO-EA-PCO-01:CAM:ReverseY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PCO.CAM,0,1)REVERSE_Y")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}


###################################################################
#  These records control the acquisition time and                 #
#  period                                                         #
###################################################################
record(ao, "DEMO-EA-PCO-01:CAM:AcquireTime")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(PCO.CAM,0,1)ACQ_TIME")
   field(PREC, "3")
   field(VAL,  "1.0")
   info(autosaveFields, "VAL")
}

record(ai, "DEMO-EA-PCO-01:CAM:AcquireTime_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PCO.CAM,0,1)ACQ_TIME")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

record(ao, "DEMO-EA-PCO-01:CAM:AcquirePeriod")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(PCO.CAM,0,1)ACQ_PERIOD")
   field(PREC, "3")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(ai, "DEMO-EA-PCO-01:CAM:AcquirePeriod_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PCO.CAM,0,1)ACQ_PERIOD")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

record(ai, "DEMO-EA-PCO-01:CAM:TimeRemaining_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PCO.CAM,0,1)TIME_REMAINING")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the gain                                 #
###################################################################
record(ao, "DEMO-EA-PCO-01:CAM:Gain")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(PCO.CAM,0,1)GAIN")
   field(VAL,  "1.0")
   field(PREC, "3")
   info(autosaveFields, "VAL")
}

record(ai, "DEMO-EA-PCO-01:CAM:Gain_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PCO.CAM,0,1)GAIN")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the frame type                           #
###################################################################
record(mbbo, "DEMO-EA-PCO-01:CAM:FrameType")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PCO.CAM,0,1)FRAME_TYPE")
   field(ZRST, "Normal")
   field(ZRVL, "0")
   field(ONST, "Background")
   field(ONVL, "1")
   field(TWST, "FlatField")
   field(TWVL, "2")
   field(THST, "DblCorrelation")
   field(THVL, "3")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(mbbi, "DEMO-EA-PCO-01:CAM:FrameType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PCO.CAM,0,1)FRAME_TYPE")
   field(ZRST, "Normal")
   field(ZRVL, "0")
   field(ONST, "Background")
   field(ONVL, "1")
   field(TWST, "FlatField")
   field(TWVL, "2")
   field(THST, "DblCorrelation")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the acquisition mode                     #
###################################################################
record(mbbo, "DEMO-EA-PCO-01:CAM:ImageMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PCO.CAM,0,1)IMAGE_MODE")
   field(ZRST, "Single")
   field(ZRVL, "0")
   field(ONST, "Multiple")
   field(ONVL, "1")
   field(TWST, "Continuous")
   field(TWVL, "2")
   field(VAL,  "2")
   info(autosaveFields, "VAL")
}

record(mbbi, "DEMO-EA-PCO-01:CAM:ImageMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PCO.CAM,0,1)IMAGE_MODE")
   field(ZRST, "Single")
   field(ZRVL, "0")
   field(ONST, "Multiple")
   field(ONVL, "1")
   field(TWST, "Continuous")
   field(TWVL, "2")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the trigger mode                         #
###################################################################
record(mbbo, "DEMO-EA-PCO-01:CAM:TriggerMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PCO.CAM,0,1)TRIGGER_MODE")
   field(ZRST, "Internal")
   field(ZRVL, "0")
   field(ONST, "External")
   field(ONVL, "1")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(mbbi, "DEMO-EA-PCO-01:CAM:TriggerMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PCO.CAM,0,1)TRIGGER_MODE")
   field(ZRST, "Internal")
   field(ZRVL, "0")
   field(ONST, "External")
   field(ONVL, "1")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the number of exposures and              #
#  number of images                                               #
###################################################################
record(longout, "DEMO-EA-PCO-01:CAM:NumExposures")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PCO.CAM,0,1)NEXPOSURES")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "DEMO-EA-PCO-01:CAM:NumExposures_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PCO.CAM,0,1)NEXPOSURES")
   field(SCAN, "I/O Intr")
}

record(longin, "DEMO-EA-PCO-01:CAM:NumExposuresCounter_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PCO.CAM,0,1)NEXPOSURES_COUNTER")
   field(SCAN, "I/O Intr")
}
record(longout, "DEMO-EA-PCO-01:CAM:NumImages")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PCO.CAM,0,1)NIMAGES")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "DEMO-EA-PCO-01:CAM:NumImages_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PCO.CAM,0,1)NIMAGES")
   field(SCAN, "I/O Intr")
}

record(longin, "DEMO-EA-PCO-01:CAM:NumImagesCounter_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PCO.CAM,0,1)NIMAGES_COUNTER")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control  acquisition start and                   #
#  and stop                                                       #
###################################################################

record(bo, "DEMO-EA-PCO-01:CAM:Acquire") {
   field(DTYP, "asynInt32")
   field(OUT, "@asyn(PCO.CAM,0,1)ACQUIRE")
   field(ZNAM, "Done")
   field(ONAM, "Acquire")
   field(VAL,  "0")
   field(FLNK, "DEMO-EA-PCO-01:CAM:SetAcquireBusy")
   info(asyn:READBACK, "1")
}

record(bi, "DEMO-EA-PCO-01:CAM:Acquire_RBV") {
   field(DTYP, "asynInt32")
   field(INP, "@asyn(PCO.CAM,0,1)ACQUIRE")
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(calcout, "DEMO-EA-PCO-01:CAM:SetAcquireBusy")
{
    field(INPA, "DEMO-EA-PCO-01:CAM:Acquire NPP")
    field(CALC, "A")
    field(OOPT, "Transition To Non-zero")
    field(OUT,  "DEMO-EA-PCO-01:CAM:AcquireBusy PP")
}

record(busy, "DEMO-EA-PCO-01:CAM:AcquireBusy") {
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(VAL,  "0")
}

record(calcout, "DEMO-EA-PCO-01:CAM:ClearAcquireBusy")
{
    field(INPA, "DEMO-EA-PCO-01:CAM:WaitForPlugins CP")
    field(INPB, "DEMO-EA-PCO-01:CAM:Acquire_RBV CP")
    field(INPC, "DEMO-EA-PCO-01:CAM:NumQueuedArrays CP")
    field(CALC, "A ? B || (C > 0) : B")
    field(OOPT, "Transition To Zero")
    field(OUT,  "DEMO-EA-PCO-01:CAM:AcquireBusy PP")
}

record(bo, "DEMO-EA-PCO-01:CAM:WaitForPlugins") {
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(VAL,  "0")
}

###################################################################
#  These records are for the detector state                       #
###################################################################

record(mbbi, "DEMO-EA-PCO-01:CAM:DetectorState_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PCO.CAM,0,1)STATUS")
    field(ZRST, "Idle")
    field(ZRVL, "0")
    field(ZRSV, "NO_ALARM")
    field(ONST, "Acquire")
    field(ONVL, "1")
    field(ONSV, "NO_ALARM")
    field(TWST, "Readout")
    field(TWVL, "2")
    field(TWSV, "NO_ALARM")
    field(THST, "Correct")
    field(THVL, "3")
    field(THSV, "NO_ALARM")
    field(FRST, "Saving")
    field(FRVL, "4")
    field(FRSV, "NO_ALARM")
    field(FVST, "Aborting")
    field(FVVL, "5")
    field(FVSV, "MINOR")
    field(SXST, "Error")
    field(SXVL, "6")
    field(SXSV, "MAJOR")
    field(SVST, "Waiting")
    field(SVVL, "7")
    field(SVSV, "NO_ALARM")
    field(EIST, "Initializing")
    field(EIVL, "8")
    field(EISV, "NO_ALARM")
    field(NIST, "Disconnected")
    field(NIVL, "9")
    field(NISV, "INVALID")
    field(TEST, "Aborted")
    field(TEVL, "10")
    field(TESV, "MINOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records provide status information                       #
###################################################################

# Status message.
record(waveform, "DEMO-EA-PCO-01:CAM:StatusMessage_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(PCO.CAM,0,1)STATUS_MESSAGE")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(waveform, "DEMO-EA-PCO-01:CAM:StringToServer_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(PCO.CAM,0,1)STRING_TO_SERVER")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(waveform, "DEMO-EA-PCO-01:CAM:StringFromServer_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(PCO.CAM,0,1)STRING_FROM_SERVER")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

################################################################@###
#  This record can be used to force a read of the detector status  #
####################################################################
record(bo,"DEMO-EA-PCO-01:CAM:ReadStatus") {
    field(DTYP,"asynInt32")
    field(OUT, "@asyn(PCO.CAM,0,1)READ_STATUS")
    field(VAL, "1")
    field(SCAN,"Passive")
    info(autosaveFields, "SCAN")
}

###################################################################
#  These records control the shutter                              #
###################################################################

record(mbbo, "DEMO-EA-PCO-01:CAM:ShutterMode")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PCO.CAM,0,1)SHUTTER_MODE")
    field(ZRST, "None")
    field(ZRVL, "0")
    field(ONST, "EPICS PV")
    field(ONVL, "1")
    field(TWST, "Detector output")
    field(TWVL, "2")
    field(VAL,  "0")
    info(autosaveFields, "VAL")
}

record(mbbi, "DEMO-EA-PCO-01:CAM:ShutterMode_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PCO.CAM,0,1)SHUTTER_MODE")
    field(ZRST, "None")
    field(ZRVL, "0")
    field(ONST, "EPICS PV")
    field(ONVL, "1")
    field(TWST, "Camera output")
    field(TWVL, "2")
    field(SCAN, "I/O Intr")
}

record(bo, "DEMO-EA-PCO-01:CAM:ShutterControl")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PCO.CAM,0,1)SHUTTER_CONTROL")
    field(ZNAM, "Close")
    field(ONAM, "Open")
    field(VAL,  "0")
}

record(bi, "DEMO-EA-PCO-01:CAM:ShutterControl_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PCO.CAM,0,1)SHUTTER_CONTROL")
    field(ZNAM, "Close")
    field(ONAM, "Open")
    field(SCAN, "I/O Intr")
}

record(bi, "DEMO-EA-PCO-01:CAM:ShutterStatus_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PCO.CAM,0,1)SHUTTER_STATUS")
    field(ZNAM, "Closed")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Open")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "DEMO-EA-PCO-01:CAM:ShutterOpenDelay")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(PCO.CAM,0,1)SHUTTER_OPEN_DELAY")
   field(PREC, "3")
   field(VAL,  "0.0")
   info(autosaveFields, "VAL")
}

record(ai, "DEMO-EA-PCO-01:CAM:ShutterOpenDelay_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PCO.CAM,0,1)SHUTTER_OPEN_DELAY")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

record(ao, "DEMO-EA-PCO-01:CAM:ShutterCloseDelay")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(PCO.CAM,0,1)SHUTTER_CLOSE_DELAY")
   field(PREC, "3")
   field(VAL,  "0.0")
   info(autosaveFields, "VAL")
}

record(ai, "DEMO-EA-PCO-01:CAM:ShutterCloseDelay_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PCO.CAM,0,1)SHUTTER_CLOSE_DELAY")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

# This record changes state when the driver opens/closes an EPICS shutter
record(bi, "DEMO-EA-PCO-01:CAM:ShutterControlEPICS")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PCO.CAM,0,1)SHUTTER_CONTROL_EPICS")
    field(ZNAM, "Closed")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Open")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
    field(FLNK, "DEMO-EA-PCO-01:CAM:ShutterFanout.PROC")
}

record(fanout, "DEMO-EA-PCO-01:CAM:ShutterFanout")
{
    field(LNK1, "DEMO-EA-PCO-01:CAM:ShutterOpenEPICS.PROC PP MS")
    field(LNK2, "DEMO-EA-PCO-01:CAM:ShutterCloseEPICS.PROC PP MS")
}

record(calcout, "DEMO-EA-PCO-01:CAM:ShutterOpenEPICS")
{
    field(INPA, "DEMO-EA-PCO-01:CAM:ShutterControlEPICS.VAL NPP NMS")
    field(CALC, "A")
    field(OOPT, "Transition To Non-zero")
    field(DOPT, "Use OCAL")
    field(OCAL, "1")
    field(OUT,  "")
    info(autosaveFields, "OUT OCAL")
}

record(calcout, "DEMO-EA-PCO-01:CAM:ShutterCloseEPICS")
{
    field(INPA, "DEMO-EA-PCO-01:CAM:ShutterControlEPICS.VAL NPP NMS")
    field(CALC, "A")
    field(OOPT, "Transition To Zero")
    field(DOPT, "Use OCAL")
    field(OCAL, "0")
    field(OUT,  "")
    info(autosaveFields, "OUT OCAL")
}

record(mbbi, "DEMO-EA-PCO-01:CAM:ShutterStatusEPICS_RBV")
{
    field(DTYP, "Raw Soft Channel")
    field(INP,  "test CP MS")
    field(ZRVL, "0")
    field(ZRST, "Closed")
    field(ZRSV, "NO_ALARM")
    field(ONVL, "1")
    field(ONST, "Open")
    field(ONSV, "MINOR")
    info(autosaveFields, "INP ZRVL ONVL")
}

###################################################################
#  These records control the detector temperature                 #
###################################################################

record(ao, "DEMO-EA-PCO-01:CAM:Temperature")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(PCO.CAM,0,1)TEMPERATURE")
   field(PREC, "1")
   field(EGU,  "C")
   field(VAL,  "25.0")
   info(autosaveFields, "VAL")
}

record(ai, "DEMO-EA-PCO-01:CAM:Temperature_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PCO.CAM,0,1)TEMPERATURE")
   field(PREC, "1")
   field(EGU,  "C")
   field(SCAN, "I/O Intr")
}

record(ai, "DEMO-EA-PCO-01:CAM:TemperatureActual")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PCO.CAM,0,1)TEMPERATURE_ACTUAL")
   field(PREC, "1")
   field(EGU,  "C")
   field(SCAN, "I/O Intr")
}


###################################################################
#  The asynRecord is used for mainly for trace mask               #
###################################################################

# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"DEMO-EA-PCO-01:CAM:AsynIO")
{
    field(PORT, PCO.CAM)
    field(TIB2,"1")
    info("ADType", "ADDriver")
}


# Redefine the color mode choices from ADBase.template to only have those that the simDetector
# driver supports.  Keep the same values (xxVL), but change the menu numbers.

record(mbbo, "DEMO-EA-PCO-01:CAM:ColorMode")
{
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "RGB1")
   field(ONVL, "2")
   field(TWST, "RGB2")
   field(TWVL, "3")
   field(THST, "RGB3")
   field(THVL, "4")
   field(FRST, "")
   field(FVST, "")
   field(SXST, "")
   field(SVST, "")
   field(EIST, "")
}

record(mbbi, "DEMO-EA-PCO-01:CAM:ColorMode_RBV")
{
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "RGB1")
   field(ONVL, "2")
   field(TWST, "RGB2")
   field(TWVL, "3")
   field(THST, "RGB3")
   field(THVL, "4")
   field(FRST, "")
   field(FVST, "")
   field(SXST, "")
   field(SVST, "")
   field(EIST, "")
}


# New records for simulation detector
record(ao, "DEMO-EA-PCO-01:CAM:GainX")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(PCO.CAM,0,1)SIM_GAIN_X")
   field(PREC, "2")
   info(autosaveFields, "VAL")
}

record(ai, "DEMO-EA-PCO-01:CAM:GainX_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PCO.CAM,0,1)SIM_GAIN_X")
   field(PREC, "2")
   field(SCAN, "I/O Intr")
}

record(ao, "DEMO-EA-PCO-01:CAM:GainY")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(PCO.CAM,0,1)SIM_GAIN_Y")
   field(PREC, "2")
   info(autosaveFields, "VAL")
}

record(ai, "DEMO-EA-PCO-01:CAM:GainY_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PCO.CAM,0,1)SIM_GAIN_Y")
   field(PREC, "2")
   field(SCAN, "I/O Intr")
}

record(ao, "DEMO-EA-PCO-01:CAM:GainRed")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(PCO.CAM,0,1)SIM_GAIN_RED")
   field(PREC, "2")
   info(autosaveFields, "VAL")
}

record(ai, "DEMO-EA-PCO-01:CAM:GainRed_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PCO.CAM,0,1)SIM_GAIN_RED")
   field(PREC, "2")
   field(SCAN, "I/O Intr")
}

record(ao, "DEMO-EA-PCO-01:CAM:GainGreen")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(PCO.CAM,0,1)SIM_GAIN_GREEN")
   field(PREC, "2")
   info(autosaveFields, "VAL")
}

record(ai, "DEMO-EA-PCO-01:CAM:GainGreen_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PCO.CAM,0,1)SIM_GAIN_GREEN")
   field(PREC, "2")
   field(SCAN, "I/O Intr")
}

record(ao, "DEMO-EA-PCO-01:CAM:GainBlue")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(PCO.CAM,0,1)SIM_GAIN_BLUE")
   field(PREC, "2")
   info(autosaveFields, "VAL")
}

record(ai, "DEMO-EA-PCO-01:CAM:GainBlue_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PCO.CAM,0,1)SIM_GAIN_BLUE")
   field(PREC, "2")
   field(SCAN, "I/O Intr")
}

record(longout, "DEMO-EA-PCO-01:CAM:Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PCO.CAM,0,1)RESET_IMAGE")
}

record(longin, "DEMO-EA-PCO-01:CAM:Reset_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PCO.CAM,0,1)RESET_IMAGE")
   field(SCAN, "I/O Intr")
}

record(longout, "DEMO-EA-PCO-01:CAM:Noise")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PCO.CAM,0,1)SIM_NOISE")
   info(autosaveFields, "VAL")
}

record(longin, "DEMO-EA-PCO-01:CAM:Noise_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PCO.CAM,0,1)SIM_NOISE")
   field(SCAN, "I/O Intr")
}

record(mbbo, "DEMO-EA-PCO-01:CAM:SimMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PCO.CAM,0,1)SIM_MODE")
   field(ZRST, "LinearRamp")
   field(ZRVL, "0")
   field(ONST, "Peaks")
   field(ONVL, "1")
   field(TWST, "Sine")
   field(TWVL, "2")
   info(autosaveFields, "VAL")
}

record(mbbi, "DEMO-EA-PCO-01:CAM:SimMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PCO.CAM,0,1)SIM_MODE")
   field(ZRST, "LinearRamp")
   field(ZRVL, "0")
   field(ONST, "Peaks")
   field(ONVL, "1")
   field(TWST, "Sine")
   field(TWVL, "2")
   field(SCAN, "I/O Intr")
}

# Records for peak simulation mode
record(longout, "DEMO-EA-PCO-01:CAM:PeakStartX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PCO.CAM,0,1)SIM_PEAK_START_X")
   info(autosaveFields, "VAL")
}

record(longin, "DEMO-EA-PCO-01:CAM:PeakStartX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PCO.CAM,0,1)SIM_PEAK_START_X")
   field(SCAN, "I/O Intr")
}

record(longout, "DEMO-EA-PCO-01:CAM:PeakStartY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PCO.CAM,0,1)SIM_PEAK_START_Y")
   info(autosaveFields, "VAL")
}

record(longin, "DEMO-EA-PCO-01:CAM:PeakStartY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PCO.CAM,0,1)SIM_PEAK_START_Y")
   field(SCAN, "I/O Intr")
}

record(longout, "DEMO-EA-PCO-01:CAM:PeakNumX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PCO.CAM,0,1)SIM_PEAK_NUM_X")
   info(autosaveFields, "VAL")
}

record(longin, "DEMO-EA-PCO-01:CAM:PeakNumX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PCO.CAM,0,1)SIM_PEAK_NUM_X")
   field(SCAN, "I/O Intr")
}

record(longout, "DEMO-EA-PCO-01:CAM:PeakNumY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PCO.CAM,0,1)SIM_PEAK_NUM_Y")
   info(autosaveFields, "VAL")
}

record(longin, "DEMO-EA-PCO-01:CAM:PeakNumY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PCO.CAM,0,1)SIM_PEAK_NUM_Y")
   field(SCAN, "I/O Intr")
}

record(longout, "DEMO-EA-PCO-01:CAM:PeakStepX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PCO.CAM,0,1)SIM_PEAK_STEP_X")
   info(autosaveFields, "VAL")
}

record(longin, "DEMO-EA-PCO-01:CAM:PeakStepX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PCO.CAM,0,1)SIM_PEAK_STEP_X")
   field(SCAN, "I/O Intr")
}

record(longout, "DEMO-EA-PCO-01:CAM:PeakStepY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PCO.CAM,0,1)SIM_PEAK_STEP_Y")
   info(autosaveFields, "VAL")
}

record(longin, "DEMO-EA-PCO-01:CAM:PeakStepY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PCO.CAM,0,1)SIM_PEAK_STEP_Y")
   field(SCAN, "I/O Intr")
}

record(longout, "DEMO-EA-PCO-01:CAM:PeakWidthX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PCO.CAM,0,1)SIM_PEAK_WIDTH_X")
   info(autosaveFields, "VAL")
}

record(longin, "DEMO-EA-PCO-01:CAM:PeakWidthX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PCO.CAM,0,1)SIM_PEAK_WIDTH_X")
   field(SCAN, "I/O Intr")
}

record(longout, "DEMO-EA-PCO-01:CAM:PeakWidthY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PCO.CAM,0,1)SIM_PEAK_WIDTH_Y")
   info(autosaveFields, "VAL")
}

record(longin, "DEMO-EA-PCO-01:CAM:PeakWidthY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PCO.CAM,0,1)SIM_PEAK_WIDTH_Y")
   field(SCAN, "I/O Intr")
}

record(longout, "DEMO-EA-PCO-01:CAM:PeakVariation")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PCO.CAM,0,1)SIM_PEAK_HEIGHT_VARIATION")
   info(autosaveFields, "VAL")
}

record(longin, "DEMO-EA-PCO-01:CAM:PeakVariation_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PCO.CAM,0,1)SIM_PEAK_HEIGHT_VARIATION")
   field(SCAN, "I/O Intr")
}

# Records for sine wave simulation mode
record(ao, "DEMO-EA-PCO-01:CAM:SineOffset")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(PCO.CAM,0,1)SIM_SINE_OFFSET")
   field(PREC, "2")
   info(autosaveFields, "VAL")
}

record(ai, "DEMO-EA-PCO-01:CAM:SineOffset_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PCO.CAM,0,1)SIM_SINE_OFFSET")
   field(PREC, "2")
   field(SCAN, "I/O Intr")
}

record(ao, "DEMO-EA-PCO-01:CAM:SineNoise")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(PCO.CAM,0,1)SIM_SINE_NOISE")
   field(PREC, "2")
   info(autosaveFields, "VAL")
}

record(ai, "DEMO-EA-PCO-01:CAM:SineNoise_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PCO.CAM,0,1)SIM_SINE_NOISE")
   field(PREC, "2")
   field(SCAN, "I/O Intr")
}

record(mbbo, "DEMO-EA-PCO-01:CAM:XSineOperation")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PCO.CAM,0,1)SIM_XSINE_OPERATION")
   field(ZRST, "Add")
   field(ZRVL, "0")
   field(ONST, "Multiply")
   field(ONVL, "1")
   info(autosaveFields, "VAL")
}

record(mbbi, "DEMO-EA-PCO-01:CAM:XSineOperation_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PCO.CAM,0,1)SIM_XSINE_OPERATION")
   field(ZRST, "LinearRamp")
   field(ZRST, "Add")
   field(ZRVL, "0")
   field(ONST, "Multiply")
   field(ONVL, "1")
   field(SCAN, "I/O Intr")
}

record(ao, "DEMO-EA-PCO-01:CAM:XSine1Amplitude")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(PCO.CAM,0,1)SIM_XSINE1_AMPLITUDE")
   field(PREC, "2")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(ai, "DEMO-EA-PCO-01:CAM:XSine1Amplitude_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PCO.CAM,0,1)SIM_XSINE1_AMPLITUDE")
   field(PREC, "2")
   field(SCAN, "I/O Intr")
}

record(ao, "DEMO-EA-PCO-01:CAM:XSine1Frequency")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(PCO.CAM,0,1)SIM_XSINE1_FREQUENCY")
   field(PREC, "2")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(ai, "DEMO-EA-PCO-01:CAM:XSine1Frequency_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PCO.CAM,0,1)SIM_XSINE1_FREQUENCY")
   field(PREC, "2")
   field(SCAN, "I/O Intr")
}

record(ao, "DEMO-EA-PCO-01:CAM:XSine1Phase")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(PCO.CAM,0,1)SIM_XSINE1_PHASE")
   field(PREC, "2")
   info(autosaveFields, "VAL")
}

record(ai, "DEMO-EA-PCO-01:CAM:XSine1Phase_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PCO.CAM,0,1)SIM_XSINE1_PHASE")
   field(PREC, "2")
   field(SCAN, "I/O Intr")
}

record(ao, "DEMO-EA-PCO-01:CAM:XSine2Amplitude")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(PCO.CAM,0,1)SIM_XSINE2_AMPLITUDE")
   field(PREC, "2")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(ai, "DEMO-EA-PCO-01:CAM:XSine2Amplitude_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PCO.CAM,0,1)SIM_XSINE2_AMPLITUDE")
   field(PREC, "2")
   field(SCAN, "I/O Intr")
}

record(ao, "DEMO-EA-PCO-01:CAM:XSine2Frequency")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(PCO.CAM,0,1)SIM_XSINE2_FREQUENCY")
   field(PREC, "2")
   field(VAL,  "2")
   info(autosaveFields, "VAL")
}

record(ai, "DEMO-EA-PCO-01:CAM:XSine2Frequency_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PCO.CAM,0,1)SIM_XSINE2_FREQUENCY")
   field(PREC, "2")
   field(SCAN, "I/O Intr")
}

record(ao, "DEMO-EA-PCO-01:CAM:XSine2Phase")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(PCO.CAM,0,1)SIM_XSINE2_PHASE")
   field(PREC, "2")
   field(VAL,  "90")
   info(autosaveFields, "VAL")
}

record(ai, "DEMO-EA-PCO-01:CAM:XSine2Phase_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PCO.CAM,0,1)SIM_XSINE2_PHASE")
   field(PREC, "2")
   field(SCAN, "I/O Intr")
}

record(mbbo, "DEMO-EA-PCO-01:CAM:YSineOperation")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PCO.CAM,0,1)SIM_YSINE_OPERATION")
   field(ZRST, "Add")
   field(ZRVL, "0")
   field(ONST, "Multiply")
   field(ONVL, "1")
   info(autosaveFields, "VAL")
}

record(mbbi, "DEMO-EA-PCO-01:CAM:YSineOperation_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PCO.CAM,0,1)SIM_YSINE_OPERATION")
   field(ZRST, "LinearRamp")
   field(ZRST, "Add")
   field(ZRVL, "0")
   field(ONST, "Multiply")
   field(ONVL, "1")
   field(SCAN, "I/O Intr")
}

record(ao, "DEMO-EA-PCO-01:CAM:YSine1Amplitude")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(PCO.CAM,0,1)SIM_YSINE1_AMPLITUDE")
   field(PREC, "2")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(ai, "DEMO-EA-PCO-01:CAM:YSine1Amplitude_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PCO.CAM,0,1)SIM_YSINE1_AMPLITUDE")
   field(PREC, "2")
   field(SCAN, "I/O Intr")
}

record(ao, "DEMO-EA-PCO-01:CAM:YSine1Frequency")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(PCO.CAM,0,1)SIM_YSINE1_FREQUENCY")
   field(PREC, "2")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(ai, "DEMO-EA-PCO-01:CAM:YSine1Frequency_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PCO.CAM,0,1)SIM_YSINE1_FREQUENCY")
   field(PREC, "2")
   field(SCAN, "I/O Intr")
}

record(ao, "DEMO-EA-PCO-01:CAM:YSine1Phase")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(PCO.CAM,0,1)SIM_YSINE1_PHASE")
   field(PREC, "2")
   info(autosaveFields, "VAL")
}

record(ai, "DEMO-EA-PCO-01:CAM:YSine1Phase_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PCO.CAM,0,1)SIM_YSINE1_PHASE")
   field(PREC, "2")
   field(SCAN, "I/O Intr")
}

record(ao, "DEMO-EA-PCO-01:CAM:YSine2Amplitude")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(PCO.CAM,0,1)SIM_YSINE2_AMPLITUDE")
   field(PREC, "2")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(ai, "DEMO-EA-PCO-01:CAM:YSine2Amplitude_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PCO.CAM,0,1)SIM_YSINE2_AMPLITUDE")
   field(PREC, "2")
   field(SCAN, "I/O Intr")
}

record(ao, "DEMO-EA-PCO-01:CAM:YSine2Frequency")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(PCO.CAM,0,1)SIM_YSINE2_FREQUENCY")
   field(PREC, "2")
   field(VAL,  "2")
   info(autosaveFields, "VAL")
}

record(ai, "DEMO-EA-PCO-01:CAM:YSine2Frequency_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PCO.CAM,0,1)SIM_YSINE2_FREQUENCY")
   field(PREC, "2")
   field(SCAN, "I/O Intr")
}

record(ao, "DEMO-EA-PCO-01:CAM:YSine2Phase")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(PCO.CAM,0,1)SIM_YSINE2_PHASE")
   field(PREC, "2")
   field(VAL,  "90")
   info(autosaveFields, "VAL")
}

record(ai, "DEMO-EA-PCO-01:CAM:YSine2Phase_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PCO.CAM,0,1)SIM_YSINE2_PHASE")
   field(PREC, "2")
   field(SCAN, "I/O Intr")
}
